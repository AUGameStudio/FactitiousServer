/players/
GET a list of players

/player/ username=<text>
GET gets the record from json username; 404 if not existing
POST creates the record; 400 if already exists

/player/<pk>/
GET gets the record; 404 if not found
PUT modifies the record using json passed in

/player/<pk>/games/
GET gets a list of all game_info records for this player

/player/<pk>/current_game/
GET gets the current game record; 404 if no game available

/player/<pk>/begin_new_game/ difficulty=<difficulty> total_stories=<total_stories> feedback_version=<feedback_version> scoring_version=<scoring_version>
POST creates a new game_info with pk=<game_info.pk>; JSON fields default to model default, returns same as /game_info/<game_info.pk>/

/player/<pk>/end_current_game/
POST returns the game_info for the current game and then clears out the current_game record in the playerInfo record

/game_info/<pk>/
GET returns the info; 404 if not found
PROVISIONAL: PUT modifies the record using JSON passed in? or not... might be useful during development, but could also use admin interface...

/game_info/<pk>/rounds/
GET gets a list of all associated rounds

/game_info/<pk>/current_round/
GET returns the info for the current game_round

/game_info/<pk>/begin_new_round/
POST returns the (initialized) game_round record

/player/<pk>/current_game/end_round guess=<user's_guess>
/game_info/<pk>/end_current_round/ guess=<user's_guess>
/game_round/<pk>/end_round guess=<user's_guess>
POST returns the updated game_info record

/player/<pk>/current_game/current_round/
/game_info/<pk>/current_round/
/game_round/<pk>/
GET gets the info; 404 if not found
PUT modifies the record using JSON passed in
	examples: chunk2_requested=true

/article/<pk>/
GET returns the article information

/articles/ difficulty=<difficulty>
GET returns a list of all articles if difficulty is not present; else filtered for difficulty

/reports/
